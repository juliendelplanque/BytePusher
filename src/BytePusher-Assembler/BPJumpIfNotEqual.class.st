"
Let the instruction pointer do a jump to the defined address if ZERO flag is FALSE.

JNE address
"
Class {
	#name : #BPJumpIfNotEqual,
	#superclass : #BPAssemblerInstruction,
	#instVars : [
		'address'
	],
	#pools : [
		'BPConstants'
	],
	#category : #'BytePusher-Assembler-Assembler'
}

{ #category : #accessing }
BPJumpIfNotEqual >> address [
	^ address
]

{ #category : #accessing }
BPJumpIfNotEqual >> address: anObject [
	address := anObject
]

{ #category : #generating }
BPJumpIfNotEqual >> generateFor: anAssembler [
	| jmpAddress instruction1 instruction2 instruction3 instruction4 instruction5 instruction6 instruction7 |
	jmpAddress := self address forAssembler: anAssembler.
	instruction1 := BPInstructionToResolve new
		from: jmpAddress asDataReference; "Copy byte 0 of jmpAddress"
		to: (anAssembler reservedMemoryZoneNamed: #JUMP_IF_ZERO) + (2 * ADDRESS_SIZE);
		beAddedTo: anAssembler
		yourself.
	instruction2 := BPInstructionToResolve new
		from: (jmpAddress asDataReference byteIndex: 1); "Copy byte 1 of jmpAddress"
		to: (anAssembler reservedMemoryZoneNamed: #JUMP_IF_ZERO) + (2 * ADDRESS_SIZE + 1);
		beAddedTo: anAssembler
		yourself.
	instruction3 := BPInstructionToResolve new
		from: (jmpAddress asDataReference byteIndex: 2); "Copy byte 2 of jmpAddress"
		to: (anAssembler reservedMemoryZoneNamed: #JUMP_IF_ZERO) + (2 * ADDRESS_SIZE + 2);
		beAddedTo: anAssembler
		yourself.
		
	instruction4 := BPInstructionToResolve new
		"Copy byte 0 of instruction generated after the ones generated by this method"
		from: (BPNextInstructionReference offset: 3) asDataReference;
		to: (anAssembler reservedMemoryZoneNamed: #JUMP_IF_NONZERO) + (2 * ADDRESS_SIZE);
		beAddedTo: anAssembler
		yourself.
	instruction5 := BPInstructionToResolve new
		"Copy byte 1 of instruction generated after the ones generated by this method"
		from: ((BPNextInstructionReference offset: 2) asDataReference byteIndex: 1);
		to: (anAssembler reservedMemoryZoneNamed: #JUMP_IF_NONZERO) + (2 * ADDRESS_SIZE + 1);
		beAddedTo: anAssembler
		yourself.
	instruction6 := BPInstructionToResolve new
		"Copy byte 2 of instruction generated after the ones generated by this method"
		from: ((BPNextInstructionReference offset: 1) asDataReference byteIndex: 2);
		to: (anAssembler reservedMemoryZoneNamed: #JUMP_IF_NONZERO) + (2 * ADDRESS_SIZE + 2);
		beAddedTo: anAssembler
		yourself.
	
	instruction7 := BPInstructionToResolve new
		from: (anAssembler registerNamed: #ZERO);
		yourself.
	instruction7
		to: (instruction7 asReference byteIndex: 8);
		"The lower-byte of this address will be overwritten by the instruction to point
		 to either #JUMP_IF_ZERO or #JUMP_IF_NONZERO.
		"
		jump: (anAssembler reservedMemoryZoneNamed: #JUMP_IF_ZERO);
		beAddedTo: anAssembler.
	instruction1
		jump: instruction2 asReference;
		tag: #jumpIfNotEqual:.
	instruction2
		jump: instruction3 asReference;
		tag: #jumpIfNotEqual:.
	instruction3
		jump: instruction4 asReference;
		tag: #jumpIfNotEqual:.
	instruction4
		jump: instruction5 asReference;
		tag: #jumpIfNotEqual:.
	instruction5
		jump: instruction6 asReference;
		tag: #jumpIfNotEqual:.
	instruction6
		jump: instruction7 asReference;
		tag: #jumpIfNotEqual:.
	instruction7
		tag: #jumpIfNotEqual:
]
